GitOps-Based Deployment Pipeline on AWS EKS

Objective:
Construct a fully automated, GitOps-driven CI/CD pipeline to deploy a sample microservice application to an AWS EKS cluster. You are welcome to utilize any open-source tools, modules, or scripts that you find helpful. Please complete all of the tasks listed below.  The extra credit task is optional.

Tasks:

Infrastructure Provisioning:
Use Terraform (or AWS CloudFormation) to provision an EKS cluster along with the necessary networking, IAM roles, and other AWS resources.
Use Helm to install any additional kubernetes software that you will need in this cluster

::Completion Notes:: 
Terraform was used to provision the EKS cluster along with networking (see below for rough diagram), IAM roles (taking least privelage best practices into account) and security groups.  
The Domain name already existed, so it was  not created with Terraform/IaC.  GitHub actions Connection to AWS is configured to use the GitHub OIDC provider and an assumed role rather than static secrets, for added security.  The assumed role is configured with full admin privilages; this was in the interest of time, for dev/test purposes only.  Production use would require scaling permissions appropriately.  

Helm is used to manage prometheus, autoscaling and package deployment to AKS.  Helm is also used in conjuction with Terraform to build and configure ArgoCD and Argo rollouts.  

GitOps Setup:
Configure a GitOps tool (such as ArgoCD or Flux) to monitor a Git repository for changes in deployment manifests. Demonstrate how updating a manifest triggers an automatic deployment to the cluster.

Application Deployment:
Package a sample microservice (or use a provided sample) in a container image and deploy it on EKS.  Develop a helm chart to deploy the application.  Implement automated rollbacks in case of failures.  

Documentation & Testing:
Document your pipeline, explain your design choices, and include a test scenario that simulates a deployment failure triggering an automatic rollback.

::Completion Notes::
ArgoCD and Argo rollouts were chosen to implement a full GitOps workflow.  When changes are pushed to the /app/* directory of the repository, GitHub Actions workflows will run the docker build and push the image to the AWS container registry, and update the Helm chart with the newest image name.  Argo CD will monitor the repository for changes and sync the change.  

Argo Rollout will slowly rollout the new version and shift traffic to the new deployment.  If a failure is detected (i.e. a healthcheck endpoint is detected), Argo rollouts should roll back the deployment.  






                                  +------------------+
                                  |                  |
                 +------------->  | Route 53         |
                 |                | (griffinfamily.link)
                 |                |                  |
                 |                +--------+---------+
                 |                         |
                 |                         v
                 |                +--------+---------+
Internet +-----> |                |                  |
                 +------------->  | ALB              |
                 |                | (www.griffinfamily.link)
                 |                |                  |
                 |                +--------+---------+
                 |                         |
                 v                         v
        +--------+---------+      +----------------+----------------+
        |                  |      |                                 |
        | Internet Gateway |----->|  Virtual Private Cloud (VPC)    |
        |                  |      |                                 |
        +------------------+      |  +-------------+ +------------+ |
                                  |  |             | |            | |
                                  |  | Public      | | Public     | |
                                  |  | Subnet 1    | | Subnet 2   | |
                                  |  | (AZ-1)      | | (AZ-2)     | |
                                  |  |             | |            | |
                                  |  +------+------+ +------+-----+ |
                                  |         |               |       |
                                  |         v               v       |
                                  |  +------+------+ +------+-----+ |
                                  |  | NAT Gateway | | NAT Gateway| |
                                  |  | 1           | | 2          | |
                                  |  | (EIP-1)     | | (EIP-2)    | |
                                  |  +------+------+ +------+-----+ |
                                  |         |               |       |
                                  |         v               v       |
                                  |  +------+------+ +------+-----+ |
                                  |  |             | |            | |
                                  |  | Private     | | Private    | |
                                  |  | Subnet 1    | | Subnet 2   | |
                                  |  | (AZ-1)      | | (AZ-2)     | |
                                  |  |             | |            | |
                                  |  +------+------+ +------+-----+ |
                                  |         |               |       |
                                  +---------+---------------+-------+
                                            |               |
                                            v               v
                                  +---------+---------------+-------+
                                  |                                 |
                                  |        EKS Cluster             |
                                  |                                 |
                                  |  +-------------+ +------------+ |
                                  |  |             | |            | |
                                  |  | Node Group  | | Node Group | |
                                  |  | (AZ-1)      | | (AZ-2)     | |
                                  |  |             | |            | |
                                  |  +-------------+ +------------+ |
                                  |                                 |
                                  +---------------------------------+
                                         |               |
                                         v               v
                                  +---------+---------------+-------+
                                  |                                 |
                                  |     Kubernetes Components       |
                                  |                                 |
                                  |  +-------------+ +------------+ |
                                  |  | Nginx       | |            | |
                                  |  | Ingress     | | ArgoCD     | |
                                  |  | Controller  | |            | |
                                  |  +------+------+ +------------+ |
                                  |         |                       |
                                  |         v                       |
                                  |  +------+------+                |
                                  |  | Your Web App |               |
                                  |  | Pod(s)       |               |
                                  |  +-------------+                |
                                  |                                 |
                                  +---------------------------------+




