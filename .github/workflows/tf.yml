name: Infrastructure Deployment

on:
#Manual triggers
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation to perform'
        required: true
        default: 'plan-prod'
        type: choice
        options:
          - plan-dev
          - apply-dev
          - plan-prod
          - apply-prod
          - destroy-dev    # Add this option
          - destroy-prod   # Add this option
      
  push:
    branches:
      - main
      - dev
    paths:
      - 'infrastructure/**'
      - '.github/workflows/tf.yml'
  pull_request:
    branches:
      - main
      - dev
    paths:
      - 'infrastructure/**'

jobs:
  terraform:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::251374076386:role/GriffinFamily.Link.TF"
          aws-region: us-east-1
          audience: sts.amazonaws.com

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./infrastructure

      # Manual trigger Only: Plan - Dev
      - name: Terraform Plan (Dev)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.operation == 'plan-dev'
        run: terraform plan -var-file="env/dev.tfvars" 
        env:
          TF_VAR_argocd_admin_password: ${{ secrets.ARGOCD_ADMIN_PASSWORD }}
        working-directory: ./infrastructure

      # Manual and automatic trigger: Apply - Dev
      - name: Terraform Apply (Dev)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.operation == 'apply-dev' || (github.ref == 'refs/heads/dev' && github.event_name == 'push')
        run: terraform apply -var-file="env/dev.tfvars" -auto-approve
        env:
          TF_VAR_argocd_admin_password: ${{ secrets.ARGOCD_ADMIN_PASSWORD }}
        working-directory: ./infrastructure

      # Manual trigger: Plan - Prod
      - name: Terraform Plan (Prod)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.operation == 'plan-prod' 
        run: terraform plan -var-file="env/prod.tfvars"
        env:
          TF_VAR_argocd_admin_password: ${{ secrets.ARGOCD_ADMIN_PASSWORD }}
        working-directory: ./infrastructure

      # Manual and automatic trigger: Apply - Prod
      - name: Terraform Apply (Prod)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.operation == 'apply-prod' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
        run: terraform apply -var-file="env/prod.tfvars" -auto-approve
        env:
          TF_VAR_argocd_admin_password: ${{ secrets.ARGOCD_ADMIN_PASSWORD }}
        working-directory: ./infrastructure

      # Manual trigger: Destroy - Dev
      - name: Terraform Destroy (Dev)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.operation == 'destroy-dev'
        run: terraform destroy -var-file="env/dev.tfvars" -auto-approve
        env:
          TF_VAR_argocd_admin_password: ${{ secrets.ARGOCD_ADMIN_PASSWORD }}
        working-directory: ./infrastructure

      # Manual trigger: Destroy - Prod
      - name: Terraform Destroy (Prod)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.operation == 'destroy-prod'
        run: terraform destroy -var-file="env/prod.tfvars" -var="skip_data_sources=true" -auto-approve
        env:
          TF_VAR_argocd_admin_password: ${{ secrets.ARGOCD_ADMIN_PASSWORD }}
        working-directory: ./infrastructure
